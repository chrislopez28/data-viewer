#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(leaflet)
library(DT)
library(tidyverse)
library(rgdal)

stations <- read.csv("data/stations_test.csv")
stations$STATION <- as.character(stations$STATION)

data <- readRDS("data/ms4_data.rds")
df <- data
df$SampleDate <- as.Date(df$SampleDate)


click <- list("id" = "BC_02_SAW", 
              ".nonce" = 0.1,
              "lat" = 34.0000,
              "lng" = -118.0000)


stationmap <- read_csv("data/stationmap.csv")
stationfix <- read_csv("data/stationfix.csv")

station_map <- function(x){
  x <- as.character(x)
  ifelse(x %in% stationmap$GISname, stationmap$data_name[match(x, stationmap$GISname)], x)
}

station_fix <- function(x){
  x <- as.character(x)
  ifelse(x %in% stationfix$synonym, stationfix$name[match(x, stationfix$synonym)], x)
}

stations$STATION <- map_chr(stations$STATION, station_map)
df$StationCode <- map_chr(df$StationCode, station_fix)


# Define UI for application that draws a histogram
ui <- fluidPage(
  
  titlePanel("MS4 / TMDL Data Viewer"),
  

      
  fluidRow(
    column(8, 
           leafletOutput("mymap", height = 1000)
    ),
      
    column(4, 
      selectInput("parameter", "Parameter",
                choices = list("Copper" = "Copper", "E. coli" = "E. coli", "Enterococcus" = "Enterococcus", "Lead" = "Lead", 
                                "Zinc" = "Zinc"), selected = "Copper"),
      
      selectInput("weather", "Weather Condition",
                choices = list("Wet Weather" = "Wet", "Dry Weather" = "Dry"), selected = "Wet"),
      
      numericInput("limit", "Horizontal Line", 10),
      
      checkboxInput("add_limit", "Plot limit"),
      
      
      
      plotOutput("timeSeries"),
      
      plotOutput("boxPlot")
      )
    ),
    
  fluidRow(
    DT::dataTableOutput("table"), width = 6    
  ),
      
  downloadButton("downloadData", "Download CSV File")
  ) 

# Define server logic required to draw a histogram
server <- function(input, output) {
   
  # getColor <- function(x) {
  #   sapply(x$TYPE, function(TYPE) {
  #     if(TYPE == "RW") {
  #       "green"
  #     } else if (TYPE == "RW-LTA") {
  #       "yellow"
  #     } else if(TYPE == "Outfall") {
  #       "red"
  #     } else if(TYPE == "RW Bacteria") {
  #       "blue"
  #     } else {
  #       "black"
  #     } })
  # }
  # 
  # icons <- awesomeIcons(
  #   icon = 'ios-close',
  #   iconColor = 'black',
  #   library = 'ion',
  #   markerColor = getColor(stations)
  # )
  # 
  # 
  # 
  # pal <- colorFactor(
  #   palette = "Dark2",
  #   domain = stations$TYPE
  # )
  
  output$timeSeries <- renderPlot({
    
    yaxis <- "ug/L"
    if (input$parameter == "E. coli" | input$parameter == "Enterococcus"){
      yaxis <- "MPN/100mL"
    }
    
    plot_data <- df %>%
       filter(StationCode == click$id) %>%
       filter(AnalyteName == input$parameter) %>%
       filter(WeatherCondition == input$weather) %>%
      filter(!FractionName %in% c("Dissolved"))
    
    p <- ggplot(plot_data, aes(SampleDate, Result)) +
      geom_point() +
      scale_y_continuous(name = yaxis) +
      theme_light() +
      ggtitle(paste("Station: ", click$id))
    
    
    if(input$add_limit == TRUE) {
      p + geom_hline(yintercept = input$limit)
    }
    
    p
    
  })
  
  output$boxPlot <- renderPlot({
    
    yaxis <- "ug/L"
    if (input$parameter == "E. coli" | input$parameter == "Enterococcus"){
      yaxis <- "MPN/100mL"
    }
    
    plot_data <- df %>%
       filter(StationCode == click$id) %>%
       filter(AnalyteName == input$parameter) %>%
       filter(WeatherCondition == input$weather) %>%
      filter(!FractionName %in% c("Dissolved"))
    
    p <- ggplot(plot_data, aes(StationCode, Result)) +
      geom_boxplot() +
      scale_y_continuous(name = yaxis) +
      theme_light() +
      ggtitle(paste("Parameter: ", input$parameter))
    p
    
  })



  # IconSet <- awesomeIconList(
  #   asterisk = makeAwesomeIcon(icon = 'asterisk', markerColor = 'green', iconColor = 'white', library = "fa"),
  #   square = makeAwesomeIcon(icon = 'square', markerColor = 'blue', iconColor = 'white', library = "fa")
  # )
  # 
  # 
  # addAwesomeMarkers(lng = ~LONGITUDE, lat = ~LATITUDE, icon = ~IconSet, 
  #                   popup = paste("Station Code:", stations$STATION, "<br>",
  #                                 "Station Type:", stations$TYPE, "<br>",
  #                                 "Watershed: ", stations$WATERSHED, "<br>",
  #                                 "Description:", stations$DESCRIPTION, "<br>"))
  
  pal <- colorFactor(c("red", "yellow", "red", "red", "yellow", "orange", "orange", "green", "orange", "purple"), 
                     domain = c("Alt-Outfall", "Alt-RW", "Outfall", "PWS", "RW", "RW-Bacteria", "RW-Lake", "RW-LTA", "RW-Toxics", "Special Study"))

  
  # topoData <- readLines("json/ewmp.json") %>% paste(collapse = "\n")
  # 
    
  output$mymap <- renderLeaflet({
    m <- leaflet(data = stations) %>%
      addTiles() %>%
      addCircleMarkers(lng = ~LONGITUDE,
                 lat = ~LATITUDE,
                 radius = ~ifelse(TYPE == "RW-Bacteria" | TYPE == "RW-Toxics" | TYPE == "RW-Lake", 6,
                                  ifelse(TYPE == "Outfall" | TYPE == "Alt-Outfall" | TYPE == "PWS", 8,
                                         ifelse(TYPE == "RW-LTA", 12, 10))),
                 color = ~pal(TYPE),
                 stroke = FALSE,
                 fillOpacity = ~ifelse(TYPE == "Special Study" | TYPE == "Alt-RW" | TYPE == "Alt-Outfall", 0.25, 1),
                 layerId = ~STATION,
                 popup = paste("<B>Station Code: </B>", stations$STATION, "<br>",
                                "<B>Station Type: </B>", stations$TYPE, "<br>",
                                "<B>Watershed: </B>", stations$WATERSHED, "<br>",
                               "<B>Description: </B>", stations$DESCRIPTION, "<br>",
                               "<B>Image: </B>", "<br>",
                               paste0("<img src = ", "https://nhd.usgs.gov/userGuide/Robohelpfiles/Wqualitymonitoring.jpg", " width = 250>")),
                 clusterOptions = markerClusterOptions(maxZoom = 18)
                 ) 
      # %>% addGeoJSON(topoData)
    m
    
  })
  
  # plot_data <- reactive({
  #   selected_data <- df %>%
  #     filter(StationCode == click$id) %>%
  #     filter(AnalyteName == input$parameter) %>%
  #     filter(WeatherCondition == input$weather)
  # })
  # 
  table_data <- reactive({
     selected_data <- df %>%
       filter(StationCode == click$id) %>%
       select(StationCode, SampleDate, AnalyteName, FractionName, Result, ResQualCode,
              UnitName, RL, MDL, WeatherCondition, SampleComments)
   })
  
  output$table <- DT::renderDataTable({

    selected_data <- df %>%
      filter(StationCode == click$id) %>%
      select(StationCode, SampleDate, AnalyteName, FractionName, Result, ResQualCode,
             UnitName, RL, MDL, WeatherCondition, SampleComments)

    DT::datatable(data = selected_data,
                  options = list(pageLength = 10),
                  rownames = FALSE) %>%
      DT::formatStyle(columns = colnames(.), fontSize = "50%")
    
  }, options = list(scrollx = TRUE), width = 400)

  
  output$downloadData <- downloadHandler(
    filename = function(){
      paste("export_", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(table_data(), file, row.names = FALSE)
    }
  )
  
  observeEvent(input$mymap_marker_click, {
    click <- input$mymap_marker_click
    clickId <- input$mymap_marker_click$id
    
    print(click)
    
    if(!is.null(click$id)){
      text <- paste(click$id,": ", click$lat, ";", click$lng)
      
      output$table <- DT::renderDataTable({

         selected_data <- df %>%
           filter(StationCode == click$id) %>%
           select(StationCode, SampleDate, AnalyteName, FractionName, Result, ResQualCode,
                  UnitName, RL, MDL, WeatherCondition, SampleComments)

        DT::datatable(data = selected_data,
                      options = list(pageLength = 10),
                      rownames = FALSE) %>%
          DT::formatStyle(columns = colnames(.), fontSize = "50%")

      }, options = list(scrollx = TRUE))

      output$timeSeries <- renderPlot({

        yaxis <- "ug/L"
        if (input$parameter == "E. coli" | input$parameter == "Enterococcus"){
          yaxis <- "MPN/100mL"
        }
        
          plot_data <- df %>%
            filter(StationCode == click$id) %>%
            filter(AnalyteName == input$parameter) %>%
            filter(WeatherCondition == input$weather) %>%
            filter(!FractionName %in% c("Dissolved"))
       
        p <- ggplot(plot_data, aes(SampleDate, Result)) +
          geom_point() +
          scale_y_continuous(name = yaxis) +
          theme_light() +
          ggtitle(paste("Station: ", click$id))
        p})

      output$boxPlot <- renderPlot({

        yaxis <- "ug/L"
        if (input$parameter == "E. coli" | input$parameter == "Enterococcus"){
          yaxis <- "MPN/100mL"
        }
        
          plot_data <- df %>%
            filter(StationCode == click$id) %>%
            filter(AnalyteName == input$parameter) %>%
            filter(WeatherCondition == input$weather) %>%
            filter(!FractionName %in% c("Dissolved"))
          
        p <- ggplot(plot_data, aes(StationCode, Result)) +
          geom_boxplot() +
          scale_y_continuous(name = yaxis) +
          theme_light() +
          ggtitle(paste("Parameter: ", input$parameter))
        p

      })

      # dataTableProxy("table") %>%
      #   selectRows(which(data$StationCode == clickId))
      # leafletProxy("mymap") %>%
      #   clearPopups() %>%
      #   showPopup(lat = click$lat, lng = click$lng, popup = text)
      # output$clickid <- renderText({text})
    }
  })
  
}

# Run the application 
shinyApp(ui = ui, server = server)

